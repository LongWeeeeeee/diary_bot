import re
import json
import logging
import os


from aiogram import Bot, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import keys
from sqlite import create_profile, edit_database
import pandas as pd
from aiogram import types
import hashlib
import datetime
from datetime import timedelta


scheduler = AsyncIOScheduler()
scheduler.configure(timezone='Europe/Moscow')
class ClientState(StatesGroup):
    greet = State()
    start = State()
    change_daily_jobs_1 = State()
    steps = State()
    total_sleep = State()
    deep_sleep = State()
    about_day = State()
    personal_rate = State()
    settings = State()
    download = State()
    one_time_jobs_2 = State()
    one_time_jobs_proceed = State()
    date_jobs = State()
    del_date_job = State()
    date_jobs_1 = State()
    date_jobs_2 = State()
    date_jobs_3 = State()
    date_jobs_week = State()
    date_jobs_year = State()
    date_jobs_once = State()
    date_jobs_month = State()
    collected_data = State()
    notification_proceed = State()
    notification_proceed_1 = State()
    notification_set_date = State()


bot = Bot(token=keys.Token)
dp = Dispatcher()
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
already_started = False
# locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
remove_markup = types.ReplyKeyboardRemove()
# scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
# scheduler.start()
negative_responses = {'–Ω–µ', '–Ω–µ—Ç', '-', 'pass', '–ø–∞—Å—Å', '–Ω–µ —Ö–æ—á—É', '—Å–∫–∏–ø', '–Ω–µ–∞', '–Ω–µ-–∞', '0', 0}
translate = {'–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'mon', '–≤—Ç–æ—Ä–Ω–∏–∫': 'tue', '—Å—Ä–µ–¥—É': 'wed', '—á–µ—Ç–≤–µ—Ä–≥': 'thu', '–ø—è—Ç–Ω–∏—Ü—É': 'fri',
             '—Å—É–±–±–æ—Ç—É': 'sat',
             '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'sun'}


async def add_day_to_excel(date, activities: list, sleep_quality: int, personal_rate: float,
                           my_steps: int,
                           daily_tasks: list,
                           user_message: str, message, excel_chosen_tasks=None, personal_records=None):
    path = str(message.from_user.id) + '_Diary.xlsx'
    try:
        data = pd.read_excel(path)
    except FileNotFoundError:
        data = pd.DataFrame(columns=['–î–∞—Ç–∞', '–î–µ–ª–∞ –∑–∞ –¥–µ–Ω—å', '–®–∞–≥–∏', 'Sleep quality', '–û –¥–Ω–µ', 'My rate'])

    last_row = data.index.max() + 1
    yesterday = date - timedelta(days=1)
    data.loc[last_row, '–î–∞—Ç–∞'] = yesterday.strftime("%d.%m.%Y")
    data.loc[last_row, '–î–µ–ª–∞ –∑–∞ –¥–µ–Ω—å'] = ", ".join(activities)
    data.loc[last_row, '–®–∞–≥–∏'] = my_steps
    data.loc[last_row, 'Sleep quality'] = sleep_quality
    if excel_chosen_tasks:
        user_message = f"–í—ã–ø–æ–ª–Ω–∏–ª —Ä–∞–∑–æ–≤—ã–µ –¥–µ–ª–∞: {', '.join(excel_chosen_tasks)}, {user_message}"
    data.loc[last_row, '–û –¥–Ω–µ'] = user_message
    data.loc[last_row, 'My rate'] = personal_rate
    writer = pd.ExcelWriter(path, engine='xlsxwriter')
    data.to_excel(writer, index=False, sheet_name='–õ–∏—Å—Ç1')

    workbook = writer.book
    worksheet = writer.sheets['–õ–∏—Å—Ç1']
    cell_format = workbook.add_format({'text_wrap': True})
    cell_format_middle = workbook.add_format({
        'text_wrap': True,
        'align': 'center'
    })
    for row, size in zip(['B', 'E'], [60, 122]):
        worksheet.set_column(f'{row}:{row}', size, cell_format)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–∞ A —Ä–∞–≤–Ω–æ–π 20
    for row in ['A', 'C', 'D', 'E']:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.set_column(f'{row}:{row}', 10, cell_format_middle)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–∞ A —Ä–∞–≤–Ω–æ–π 20

    writer._save()
    if not len(activities):
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¥–Ω–µ–≤–Ω–∏–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω')
    else:
        personal_records = await counter_max_days(data=data, daily_scores=daily_tasks, message=message,
                                                  activities=activities, personal_records=personal_records)
        return personal_records


def counter_negative(column, current_word, count=0):
    for words in column.iloc[::-1]:
        if not isinstance(words, float):
            split_words = words.split(', ')
            for word in split_words:
                if word == current_word:
                    return count
            count += 1
        else: 
            return count
    return count


def day_to_prefix(day: str) -> str:
    day_to_prefix_dict = {
        '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': '–∫–∞–∂–¥–æ–µ',
        '—Å—É–±–±–æ—Ç—É': '–∫–∞–∂–¥—É—é',
        '–ø—è—Ç–Ω–∏—Ü—É': '–∫–∞–∂–¥—É—é',
        '—á–µ—Ç–≤–µ—Ä–≥': '–∫–∞–∂–¥—ã–π',
        '—Å—Ä–µ–¥—É': '–∫–∞–∂–¥—É—é',
        '–≤—Ç–æ—Ä–Ω–∏–∫': '–∫–∞–∂–¥—ã–π',
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–∫–∞–∂–¥—ã–π'
    }
    return day_to_prefix_dict[day]


def counter_positive(current_word, column, count=0):
    for words in column.iloc[::-1]:
        if not isinstance(words, float):
            split_words = words.split(', ')
            if current_word in split_words:
                count += 1
            else:
                return count
        else:
            return count
    return count


# async def scheduler_in(data, state):
#     if 'scheduler_arguments' in data:
#         # –∑–∞–≥—Ä—É–∑–∫–∞ –≤ scheduler –∑–∞–¥–∞–Ω–∏–π –∏–∑ database
#         for key in list(data['scheduler_arguments'].keys()):
#             values = data['scheduler_arguments'][key]
#             values_copy = values.copy()
#             values_copy['args'] = (state, key)
#             if 'date' in values_copy:
#                 values_copy['date'] = datetime.datetime.strptime(values['date'], '%Y-%m-%d')
#             elif 'run_date' in values_copy:
#                 values_copy['run_date'] = datetime.datetime.strptime(values['run_date'], '%Y-%m-%d %H:%M')
#                 current_date = datetime.datetime.now()
#                 if current_date > (values_copy['run_date'] + timedelta(minutes=1)):
#                     del data['scheduler_arguments'][key]
#                     continue
#             unique_id = generate_unique_id_from_args(values_copy)
#             if not any(job.id == unique_id for job in scheduler.get_jobs()):
#                 values_copy['id'] = unique_id
#                 scheduler.add_job(executing_scheduler_job, **values_copy)
#
#         if len(data['scheduler_arguments']) == 0:
#             del data['scheduler_arguments']
#             await state.set_data(data)
#             await edit_database(scheduler_arguments={})


def keyboard_builder(inp: list, grid=1, chosen=None, add_dell=True, add_sent=True):
    date_builder = InlineKeyboardBuilder()
    for index, job in enumerate(inp):
        if chosen is not None:
            if job in chosen:
                date_builder.button(text=f"{job} ‚úÖÔ∏è", callback_data=f"{index}")
            else:
                date_builder.button(text=f"{job} ‚úîÔ∏è", callback_data=f"{index}")
        else:
            date_builder.button(text=f"{job} ‚úîÔ∏è", callback_data=f"{index}")
    date_builder.adjust(grid, grid)
    d_new_builder = InlineKeyboardBuilder()
    if add_dell:
        d_new_builder.button(text="‚ùå–£–¥–∞–ª–∏—Ç—å‚ùå", callback_data="–£–¥–∞–ª–∏—Ç—å")
        d_new_builder.button(text="üíº–î–æ–±–∞–≤–∏—Ç—å üíº", callback_data="–î–æ–±–∞–≤–∏—Ç—å")
        d_new_builder.adjust(2)
    if add_sent:
        d_new_builder.button(text="üöÄ–û—Ç–ø—Ä–∞–≤–∏—Ç—å üöÄ", callback_data="–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        d_new_builder.adjust(2, 1)
    date_builder.attach(d_new_builder)
    return date_builder.as_markup()


# async def start_scheduler(message, state):
#     global already_started
#     if already_started:
#         return
#     scheduler.add_job(start, 'cron', hour=8, minute=00, args=(message, state))
#     scheduler.start()
#     already_started = True


def generate_unique_id_from_args(args_dict):
    # –°–µ—Ä–∏–∞–ª–∑—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    copy_args_dict = args_dict.copy()
    copy_args_dict['args'] = args_dict['args'][1]
    serialized_args = json.dumps(copy_args_dict, sort_keys=True)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    return hashlib.sha256(serialized_args.encode()).hexdigest()


async def handle_new_user(message: Message, state: FSMContext):
    info = await bot.get_me()
    await message.answer_sticker('CAACAgIAAxkBAAIsZGVY5wgzBq6lUUSgcSYTt99JnOBbAAIIAAPANk8Tb2wmC94am2kzBA')
    await message.answer(
        f'''–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! \n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {info.username}!
–û–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –æ —Ç–≤–æ–∏—Ö –¥–Ω—è—Ö –∏ –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã –ø–æ—á–µ–º—É –¥–µ–Ω—å –±—ã–ª –ø–ª–æ—Ö–∏–º –∏–ª–∏ —Ö–æ—Ä–æ—à–∏–º
–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª. –ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –¥–µ–ª–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è? –ù–∞–ø—Ä–∏–º–µ—Ä:''')
    await message.answer('–≤—Å—Ç–∞–ª –≤ 6:30, –ª–µ–≥ –≤ 11, –∑–∞—Ä—è–¥–∫–∞ —É—Ç—Ä–æ–º, –º–∞—Å—Å–∞–∂, –ø–ø')
    await message.answer(
        '–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫–∏–µ —É–≥–æ–¥–Ω–æ',
        reply_markup=remove_markup)
    await state.set_state(ClientState.change_daily_jobs_1)


async def daily_jobs(message, state: FSMContext):
    user_data = await state.get_data()
    if 'daily_tasks' in user_data:
        daily_tasks = user_data['daily_tasks']
        daily_chosen_tasks = user_data['daily_chosen_tasks']
        keyboard = keyboard_builder(inp=daily_tasks, grid=2, chosen=daily_chosen_tasks)
        await message.answer(
            '–û—Ç–º–µ—Ç—å—Ç–µ –≤—á–µ—Ä–∞—à–Ω–∏–µ –¥–µ–ª–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"', reply_markup=keyboard)
        await state.set_state(ClientState.greet)
    else:
        await handle_new_user(message, state)


# async def rebuild_keyboard(state: FSMContext, tasks_type):
#     user_states_data = await state.get_data()
#     chosen_tasks = user_states_data[tasks_type]
#     call = user_states_data['call']
#     scheduler_arguments = user_states_data['scheduler_arguments']
#     for itr in chosen_tasks:
#         del scheduler_arguments[itr]
#     if len(scheduler_arguments) == 0:
#         del user_states_data['scheduler_arguments']
#         await state.set_data(user_states_data)
#     else:
#         scheduler_arguments_inp = [key.split('–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º : ')[1].replace('"', '') for key in
#                                    user_states_data['scheduler_arguments']]
#         keyboard = keyboard_builder(inp=scheduler_arguments_inp, add_sent=False)
#         await bot.edit_message_reply_markup(
#             chat_id=call.message.chat.id,
#             message_id=call.message.message_id,
#             reply_markup=keyboard
#         )


# async def scheduler_list(message, state, out_message, user_states_data, **kwargs):
#     # –∑–∞–≥—Ä—É–∑–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ database
#     await message.answer(out_message)
#     try:
#         scheduler_arguments = user_states_data['scheduler_arguments']
#         scheduler_arguments[out_message] = {**kwargs}
#     except KeyError:
#         scheduler_arguments = {out_message: {**kwargs}}
#     await edit_database(scheduler_arguments=scheduler_arguments)
#     await state.update_data(scheduler_arguments=scheduler_arguments)
#     await start(message, state)
async def fill_diary(message: Message, state: FSMContext) -> None:
    user_data = await state.get_data()
    if user_data:
        if 'daily_tasks' in user_data:
            await daily_jobs(message, state)
        else:
            await handle_new_user(message, state)
    else:
        await start(message, state)

async def start(message: Message, state: FSMContext, flag=True) -> None:
    data = {}
    await state.set_state(ClientState.start)
    answer = await create_profile(user_id=message.from_user.id)
    if answer is not None:

        daily_tasks, one_time_jobs, scheduler_arguments, personal_records,\
            previous_diary, chosen_collected_data, notifications_data = json.loads(answer[1]), json.loads(answer[2]),\
            json.loads(answer[3]), json.loads(answer[4]), answer[5], json.loads(answer[6]), json.loads(answer[7])
        data['daily_tasks'] = daily_tasks
        data['one_time_jobs'] = one_time_jobs
        data['scheduler_arguments'] = scheduler_arguments
        if personal_records is not None and len(personal_records) != 0:
            data['personal_records'] = personal_records
        data['previous_diary'] = previous_diary
        data['notifications_data'] = notifications_data
        if notifications_data.get('chosen_notifications', []):
            hours = notifications_data['hours']
            minutes = notifications_data['minutes']
            if notifications_data.setdefault('chosen_notifications', []) == ['–í–∫–ª—é—á–µ–Ω–æ']:
                job_id = scheduler.add_job(
                    fill_diary,
                    trigger='cron',
                    hour=hours,
                    minute=minutes,
                    args=(message, state))
                data['notifications_data']['job_id'] = job_id.id
        data['chosen_collected_data'] = chosen_collected_data
        user_data = await state.get_data()
        if 'daily_chosen_tasks' not in user_data:
            await state.update_data(daily_chosen_tasks=[], one_time_chosen_tasks=[], excel_chosen_tasks=[])
        await state.update_data(**data)
        if not daily_tasks:
            await handle_new_user(message, state)
            return
        path = str(message.from_user.id) + '_Diary.xlsx'
        if os.path.exists(path):
            keyboard = generate_keyboard(['–í—ã–≤–µ—Å—Ç–∏ –î–Ω–µ–≤–Ω–∏–∫', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–°–∫–∞—á–∞—Ç—å –î–Ω–µ–≤–Ω–∏–∫'],
                                         first_button='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –î–Ω–µ–≤–Ω–∏–∫')
        else:
            keyboard = generate_keyboard(['–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –î–Ω–µ–≤–Ω–∏–∫'])
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard)
        # –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ scheduler –∏–∑ scheduler_arguments from database
        # await scheduler_in(data, state)
    else:
        await handle_new_user(message, state)


# async def executing_scheduler_job(state, out_message):
#     # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç scheduler
#     user_states_data = await state.get_data()
#     scheduler_arguments = user_states_data['scheduler_arguments']
#     if scheduler_arguments[out_message]['trigger'] == 'date':
#         del scheduler_arguments[out_message]
#         await edit_database(scheduler_arguments=scheduler_arguments)
#     # –Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º : "—Ç–µ—Å" 14 —è–Ω–≤–∞—Ä—è 2024
#     job = normalized(out_message.split(': ')[1]).replace('"', '')
#     try:
#         one_time_jobs = user_states_data['one_time_jobs']
#         one_time_jobs.append(job)
#         await state.update_data(one_time_jobs=one_time_jobs)
#         await edit_database(one_time_jobs=one_time_jobs)
#     except KeyError:
#         await state.update_data(one_time_jobs=job)
#         await edit_database(one_time_jobs=job)


async def counter_max_days(data, daily_scores, message, activities, personal_records, output=''):
    column = data['–î–µ–ª–∞ –∑–∞ –¥–µ–Ω—å']
    if column.any():
        negative_dict = {current_word: counter_negative(current_word=current_word, column=column) for current_word in
                         daily_scores}
        positive_dict = {current_word: counter_positive(current_word=current_word, column=column) for current_word in
                         activities}
        negative_output = '\n'.join(
            ['{} : {}'.format(key, value) for key, value in negative_dict.items() if value not in [0, 1]])
        positive_output = []
        if personal_records is None:
            personal_records = {}
        for key, value in positive_dict.items():
            if key in personal_records:
                if personal_records[key] < value:
                    personal_records[key] = value
            else:
                personal_records[key] = value
            if value not in [0, 1]:
                positive_output.append(f'{key} : {value}')
        positive_output = '\n'.join(positive_output)
        if positive_output:
            output += f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å–æ–±–ª—é–¥–∞–µ—Ç–µ —ç—Ç–∏ –¥–µ–ª–∞ —É–∂–µ —Å—Ç–æ–ª—å–∫–æ –¥–Ω–µ–π:\n{positive_output}'
        if negative_output:
            if output != '':
                output += '\n\n'
            output += f'–í—ã –Ω–µ –¥–µ–ª–∞–ª–∏ —ç—Ç–∏ –¥–µ–ª–∞ —É–∂–µ —Å—Ç–æ–ª—å–∫–æ –¥–Ω–µ–π:\n{negative_output}\n\n' \
                      f'–ú–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç –¥–∞—Ç—å –∏–º –µ—â–µ –æ–¥–∏–Ω —à–∞–Ω—Å?'
        if output:
            sent_message = await message.answer(output)
            await message.bot.pin_chat_message(message.chat.id, sent_message.message_id)
            return personal_records
    else:
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¥–Ω–µ–≤–Ω–∏–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω')


def generate_keyboard(buttons: list, last_button=None, first_button=None):
    if last_button is not None:
        kb = [[types.KeyboardButton(text=button) for button in buttons], [types.KeyboardButton(text=last_button)]]
    elif first_button is not None:
        kb = [[types.KeyboardButton(text=first_button)], [types.KeyboardButton(text=button) for button in buttons]]
    else:
        kb = [[types.KeyboardButton(text=button) for button in buttons]]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
    )
    return keyboard


def normalized(text):
    return re.sub(r',(?=\S)', ', ', text).lower().replace('—ë', '–µ')


async def diary_out(message):
    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ Excel
    data = pd.read_excel(f'{message.from_user.id}_Diary.xlsx')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    await message.answer(
        "{} | {} | {} | {} | {} | {} | {} | {}".format("–î–∞—Ç–∞", "–î–µ–ª–∞ –∑–∞ –¥–µ–Ω—å", "–®–∞–≥–∏", "Total sleep", "Deep sleep",
                                                       "–û –¥–Ω–µ", "My rate", "Total"))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    last_entries = data.tail(7)

    # –ü–µ—Ä–µ–±–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 —Å—Ç—Ä–æ–∫
    for index, row in last_entries.iterrows():
        message_sheet = "{} | {} | {} | {} | {} | {} | {}".format(row["–î–∞—Ç–∞"], row["–î–µ–ª–∞ –∑–∞ –¥–µ–Ω—å"], row["–®–∞–≥–∏"],
                            row["Total sleep"], row['Deep sleep'], row['–û –¥–Ω–µ'], row['My rate'])

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
        message_parts = [message_sheet[i:i + 4096] for i in range(0, len(message_sheet), 4096)]

        for part in message_parts:
            await message.answer(part)
